textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(Composante, '<br>',
format(part_pib, big.mark = ' ', decimal.mark = ',', scientific = FALSE), ' FCFA<br>',
round(percentage, 1), '%'),
marker = list(
line = list(color = '#FFFFFF', width = 1),
colors = colorRampPalette(c("#18BC9C", "#2C3E50", "#3498DB", "#E74C3C", "#F39C12"))(nrow(data_year))
)) %>%
layout(
title = list(text = paste("Répartition du PIB -", input$annee_select),
font = list(family = "Times New Roman", size = 16)),
showlegend = FALSE, # Nous n'affichons pas la légende car on a déjà les labels dans le camembert
margin = list(l = 20, r = 20, b = 20, t = 50),
paper_bgcolor = '#fafafa',
plot_bgcolor = '#fafafa'
)
})
# Tableau des principales composantes
output$top_components_table <- renderTable({
# Filtrer par année
data_year <- data %>%
filter(Annee == input$annee_select)
# Calculer le pourcentage pour chaque composante
data_year <- data_year %>%
mutate(percentage = part_pib / unique(pib_global) * 100) %>%
arrange(desc(part_pib)) %>%
select(Composante, part_pib, percentage) %>%
head(10) # Top 10 composantes
# Formater les valeurs pour l'affichage
data_year$part_pib <- format(data_year$part_pib, big.mark = " ", scientific = FALSE)
data_year$percentage <- paste0(round(data_year$percentage, 2), "%")
# Renommer les colonnes pour l'affichage
names(data_year) <- c("Composante", "Valeur (Milliards de FCFA)", "% du PIB")
data_year
},
striped = TRUE,
hover = TRUE,
spacing = "m",
align = "c",
digits = 0)
# Mise à jour des composantes disponibles (liste unique)
observe({
updateCheckboxGroupInput(
session,
inputId = "composantes_select",
choices = unique(data$Composante),
selected = unique(data$Composante)[1:3]
)
})
observe({
updateCheckboxGroupInput(
session,
inputId = "composantes_select",
choices = unique(data$Composante),
selected = unique(data$Composante)[1:3]
)
})
output$plot_composante_evo <- renderPlotly({
req(input$composantes_select, input$compo_date_range)
data_compo <- data %>%
filter(
Composante %in% input$composantes_select,
Annee >= input$compo_date_range[1],
Annee <= input$compo_date_range[2]
)
plot_ly(data_compo, x = ~Annee, y = ~part_pib, color = ~Composante, type = 'scatter', mode = 'lines+markers',
line = list(width = 3),
marker = list(size = 6),
hoverinfo = 'text',
text = ~paste("Composante :", Composante,
"<br>Année :", Annee,
"<br>Valeur :", format(part_pib, big.mark = " ", decimal.mark = ",", scientific = FALSE), " FCFA")) %>%
layout(
xaxis = list(title = "Années"),
yaxis = list(title = "Part du PIB (en milliards FCFA)"),
hoverlabel = list(bgcolor = "#FFF", font = list(size = 12)),
plot_bgcolor = '#ffffff',
paper_bgcolor = '#ffffff'
)
})
observeEvent(input$filtre, {
req(input$agregats, input$annee)
data <- base_region %>%
rename(region = region,
annee = année,
pib = `pib en valeur`,
production = `production en valeur`,
croissance = `taux de croissance`) %>%
mutate(
pib = as.numeric(gsub(",", "", pib)),
production = as.numeric(gsub(",", "", production)),
croissance = as.numeric(gsub(",", ".", gsub("%", "", croissance)))
)
data_filtered <- data %>% filter(annee == input$annee)
var_agregat <- switch(input$agregats,
"PIB en valeur" = data_filtered$pib,
"Production en valeur" = data_filtered$production,
"Taux de croissance" = data_filtered$croissance)
if (all(is.na(var_agregat))) {
showNotification("Agrégat invalide ou données manquantes pour cette année", type = "error")
return(NULL)
}
# Fusion avec shapefile
map_data <- shapefile %>%
st_make_valid() %>%
left_join(data_filtered, by = c("ADM1_FR" = "region"))
# Utiliser st_point_on_surface (plus sûr que st_centroid)
points_surface <- st_point_on_surface(map_data$geometry)
coords <- st_coordinates(points_surface)
map_data$X <- coords[, 1]
map_data$Y <- coords[, 2]
map_data$agr_val <- var_agregat
output$carte <- renderPlot({
ggplot() +
geom_sf(data = shapefile, fill = "gray90", color = "black") +
# Cercles proportionnels
geom_point(data = map_data,
aes(x = X, y = Y, size = agr_val),
fill = "darkred", color = "black", alpha = 0.6, shape = 21) +
# Étiquettes
geom_text(data = map_data,
aes(x = X, y = Y,
label = paste0(ADM1_FR, "\n", round(agr_val, 1))),
size = 3.5, fontface = "bold", color = "black", vjust = -1) +
scale_size_continuous(name = input$agregats, range = c(5, 30)) +
labs(title = paste("Carte du Sénégal -", input$agregats, "en", input$annee)) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "right"
)
})
})
# Chargement de la base
VA_region <- read_excel("Base/VA_region.xlsx")
output$graph1 <- renderPlot({
# Filtrage selon l'année choisie dans l'input utilisateur
data <- VA_region %>%
filter(Année == input$annee) %>%
select(-Année)
# Tri et transformation de la variable Région
data <- data %>%
mutate(Région = factor(Région, levels = unique(Région)))
# Affichage du graphique
ggplot(data, aes(x = Production,
y = `Valeur ajoutée`,
size = `Production`,
color = Secteur)) +
geom_point(alpha = 0.6) +
scale_size(range = c(2, 15), name = "Valeur ajoutée") +
theme_minimal() +
labs(x = "Production",
y = "Valeur ajoutée")
})
# Graphique 2 : Production totale par région
output$graph2 <- renderPlot({
df <- VA_region %>%
filter(Année == input$annee)
ggplot(df, aes(x = Production, y = reorder(Région, Production))) +
geom_col(fill = "#4E79A7") +
theme_minimal() +
labs(
title = paste("Production totale par région en", input$annee),
x = "Production",
y = "Région"
) +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.y = element_text(size = 10)
)
})
# Graphique 3 : Évolution de la valeur ajoutée par secteur (sur toutes les années)
output$graph3 <- renderPlot({
df <- VA_region %>%
group_by(Année, Secteur) %>%
summarise(valeur_totale = sum(`Valeur ajoutée`, na.rm = TRUE))
ggplot(df, aes(x = Année, y = valeur_totale, color = Secteur, group = Secteur)) +
geom_line(size = 1.2) +
geom_point() +
theme_minimal() +
labs(title = "Évolution de la valeur ajoutée par secteur",
x = "Année", y = "Valeur ajoutée")
})
# Graphique 4 : Part des secteurs dans la valeur ajoutée (camembert)
output$circlePlot <- renderPlotly({
data <- VA_region %>%
filter(Année == input$annee)
# S'assurer qu'il y a des données à afficher
if(is.null(data) || nrow(data) == 0) {
return(plot_ly() %>%
layout(title = "Aucune donnée disponible pour l'affichage"))
}
# Obtenir la liste des régions
regions <- unique(data$Région)
# Créer des dataframes pour chaque secteur
secteur_primaire <- data %>%
filter(Secteur == "Primaire") %>%
arrange(Région)
secteur_secondaire <- data %>%
filter(Secteur == "Secondaire") %>%
arrange(Région)
secteur_tertiaire <- data %>%
filter(Secteur == "Tertiaire") %>%
arrange(Région)
# Créer un graphique circulaire
fig <- plot_ly()
# Calculer les positions angulaires pour chaque région
n_regions <- length(regions)
# Définir les secteurs et leurs caractéristiques (ordre corrigé et plus cohérent)
secteurs <- list(
A = list(
nom = "Primaire",
couleur = "#FF7F7F",
données = secteur_primaire,
angle_debut = 0,
angle_fin = 90
),
B = list(
nom = "Secondaire",
couleur = "#7FBF7F",
données = secteur_secondaire,
angle_debut = 90,
angle_fin = 180
),
C = list(
nom = "Tertiaire",
couleur = "#7F7FFF",
données = secteur_tertiaire,
angle_debut = 180,
angle_fin = 270
)
)
# Échelle de normalisation pour l'affichage uniforme
max_value <- max(c(
max(secteur_primaire$`Valeur ajoutée`, na.rm = TRUE),
max(secteur_secondaire$`Valeur ajoutée`, na.rm = TRUE),
max(secteur_tertiaire$`Valeur ajoutée`, na.rm = TRUE)
))
# Pour chaque secteur avec des données réelles
for (secteur_id in c("A", "B", "C")) {
secteur <- secteurs[[secteur_id]]
if (!is.null(secteur$données) && nrow(secteur$données) > 0) {
# Données du secteur
df <- secteur$données
# Nombre de régions dans ce secteur
n <- nrow(df)
# Calculer l'angle pour chaque région dans ce secteur
angles_secteur <- seq(
secteur$angle_debut,
secteur$angle_fin,
length.out = n + 1
)[1:n]
# Ajouter chaque barre
for (i in 1:n) {
# Gérer les valeurs NA
if (is.na(df$`Valeur ajoutée`[i])) next
# Valeur normalisée (pour l'affichage)
valeur_norm <- df$`Valeur ajoutée`[i] / max_value * 90
# Minimum pour que les petites barres soient visibles
valeur_norm <- max(valeur_norm, 5)
# Points pour dessiner la barre
angle <- angles_secteur[i]
# Coordonnées x et y du début (rayon intérieur)
rayon_interieur <- 0.4
x0 <- 0.5 + cos(angle * pi / 180) * rayon_interieur
y0 <- 0.5 + sin(angle * pi / 180) * rayon_interieur
# Coordonnées x et y de la fin (rayon extérieur basé sur la valeur)
x1 <- 0.5 + cos(angle * pi / 180) * (rayon_interieur + valeur_norm / 100)
y1 <- 0.5 + sin(angle * pi / 180) * (rayon_interieur + valeur_norm / 100)
# Ajouter la barre
fig <- add_trace(
fig,
type = "scatter",
mode = "lines",
x = c(x0, x1),
y = c(y0, y1),
line = list(
color = secteur$couleur,
width = 10
),
showlegend = FALSE,
hoverinfo = "text",
text = paste0(
"Région: ", df$Région[i], "<br>",
"Secteur: ", secteur$nom, "<br>",
"Valeur ajoutée: ", format(df$`Valeur ajoutée`[i], big.mark = " ")
)
)
# Ajouter étiquette de région pour les barres suffisamment grandes
if (valeur_norm > 15) {
x_label <- 0.5 + cos(angle * pi / 180) * (rayon_interieur + valeur_norm / 100 + 0.05)
y_label <- 0.5 + sin(angle * pi / 180) * (rayon_interieur + valeur_norm / 100 + 0.05)
fig <- add_annotations(
fig,
x = x_label,
y = y_label,
text = df$Région[i],
showarrow = FALSE,
font = list(
size = 9,
color = "black"
),
align = "center"
)
}
}
}
}
# Ajouter annotations pour les secteurs (positions corrigées)
secteur_annotations <- list(
list(
x = 0.75, y = 0.75,
text = "A",
showarrow = FALSE,
font = list(size = 20, color = "#FF7F7F")
),
list(
x = 0.75, y = 0.25,
text = "B",
showarrow = FALSE,
font = list(size = 20, color = "#7FBF7F")
),
list(
x = 0.25, y = 0.25,
text = "C",
showarrow = FALSE,
font = list(size = 20, color = "#7F7FFF")
)
)
# Configuration du graphique
fig <- layout(
fig,
title = paste("Valeur ajoutée par région et secteur -", input$annee),
showlegend = FALSE,
annotations = secteur_annotations,
xaxis = list(
showgrid = FALSE,
zeroline = FALSE,
showticklabels = FALSE,
range = c(0, 1)
),
yaxis = list(
showgrid = FALSE,
zeroline = FALSE,
showticklabels = FALSE,
range = c(0, 1),
scaleanchor = "x"
),
plot_bgcolor = "rgba(240, 240, 240, 0.1)",
shapes = list(
# Cercle central
list(
type = "circle",
x0 = 0.3, x1 = 0.7,
y0 = 0.3, y1 = 0.7,
fillcolor = "white",
line = list(color = "gray", width = 0.5)
)
)
)
return(fig)
})
# Chargement des données
data_wdi <- reactive({ load_data() })
# Value boxes
output$gdp_box <- renderValueBox({
df <- data_wdi()
valueBox(
paste0(round(tail(df$GDP, 1) / 1e9, 1), " Mrd USD"),
"PIB",
icon = icon("money-bill-wave"),
color = "green"
)
})
output$export_box <- renderValueBox({
df <- data()
valueBox(
paste0(round(tail(df$Exports, 1) / 1e9, 1), " Mrd USD"),
"Exportations",
icon = icon("ship"),
color = "blue"
)
})
output$import_box <- renderValueBox({
df <- data_wdi()
valueBox(
paste0(round(tail(df$Imports, 1) / 1e9, 1), " Mrd USD"),
"Importations",
icon = icon("truck"),
color = "red"
)
})
# Graphique des tendances
output$trend_plot <- renderPlotly({
df <- data_wdi()
plot_ly(data = df) %>%
add_lines(x = ~year, y = ~GDP / 1e9, name = "PIB", line = list(color = "green")) %>%
add_lines(x = ~year, y = ~Exports / 1e9, name = "Exportations", line = list(color = "blue")) %>%
add_lines(x = ~year, y = ~Imports / 1e9, name = "Importations", line = list(color = "red")) %>%
layout(title = "Évolution des indicateurs économiques",
xaxis = list(title = "Année"),
yaxis = list(title = "Valeurs (Mrd USD)"))
})
# Graphique de la balance commerciale
output$balance_plot <- renderPlotly({
df <- data_wdi()
if(!("Balance" %in% colnames(df))) df$Balance <- df$Exports - df$Imports
plot_ly(data = df, x = ~year, y = ~Balance, type = "scatter", mode = "lines+markers",
name = "Balance", line = list(color = "purple")) %>%
layout(title = "Balance Commerciale (Exports - Imports)",
xaxis = list(title = "Année"),
yaxis = list(title = "Balance en USD"))
})
# Croissance approximative du PIB
output$prevision_growth_plot <- renderPlotly({
df <- data_wdi()
growth <- c(NA, diff(df$GDP) / head(df$GDP, -1) * 100)
plot_ly(x = df$year, y = growth, type = "scatter", mode = "lines+markers",
name = "Croissance (%)", line = list(color = "orange")) %>%
layout(title = "Croissance annuelle du PIB",
xaxis = list(title = "Année"),
yaxis = list(title = "Pourcentage"))
})
# Prévisions
forecast_results <- eventReactive(input$forecast_btn, {
req(input$var_select, input$model_select)
df <- data_wdi()
ts_data <- ts(df[[input$var_select]], start = as.numeric(format(min(df$year), "%Y")), frequency = 1)
if(input$model_select == "prophet"){
df_prophet <- data.frame(ds = df$year, y = df[[input$var_select]])
m <- prophet(df_prophet, weekly.seasonality = FALSE, daily.seasonality = FALSE)
future <- make_future_dataframe(m, periods = input$horizon, freq = "year")
fcst <- predict(m, future)
return(list(model = "prophet", forecast = fcst, ts_data = ts_data))
} else if(input$model_select == "ets"){
model <- ets(ts_data)
fcst <- forecast(model, h = input$horizon)
return(list(model = "other", forecast = fcst, ts_data = ts_data))
} else if(input$model_select == "naive"){
fcst <- naive(ts_data, h = input$horizon)
return(list(model = "other", forecast = fcst, ts_data = ts_data))
} else if(input$model_select == "theta"){
fcst <- thetaf(ts_data, h = input$horizon)
return(list(model = "other", forecast = fcst, ts_data = ts_data))
} else {  # ARIMA par défaut
model <- auto.arima(ts_data)
fcst <- forecast(model, h = input$horizon)
return(list(model = "other", forecast = fcst, ts_data = ts_data))
}
})
output$forecast_plot <- renderPlotly({
req(forecast_results())
res <- forecast_results()
if(res$model != "prophet"){
fcst <- res$forecast
plot_ly() %>%
add_lines(x = ~time(fcst$x), y = ~fcst$x, name = "Historique", line = list(color = "black")) %>%
add_lines(x = ~time(fcst$mean), y = ~fcst$mean, name = "Prévisions", line = list(color = "red")) %>%
add_ribbons(x = ~time(fcst$mean),
ymin = fcst$lower[,"95%"],
ymax = fcst$upper[,"95%"],
name = "IC 95%",
opacity = 0.2) %>%
layout(title = paste("Prévisions -", input$var_select),
xaxis = list(title = "Année"),
yaxis = list(title = "Valeur"))
} else {
fcst <- forecast_results()$forecast
plot_ly() %>%
add_lines(x = fcst$ds, y = fcst$yhat, name = "Prévisions", line = list(color = "red")) %>%
layout(title = paste("Prévisions -", input$var_select),
xaxis = list(title = "Date"),
yaxis = list(title = "Valeur"))
}
})
output$forecast_metrics <- renderDT({
req(forecast_results())
if(forecast_results()$model != "prophet"){
acc <- accuracy(forecast_results()$forecast)
datatable(round(acc, 4), options = list(pageLength = 5))
} else {
datatable(data.frame(Message = "Métriques d'accuracy indisponibles pour Prophet."),
options = list(pageLength = 5))
}
})
}
shinyApp(ui = ui, server = server)
runApp()
library(shinyWidgets)
library(shiny)
library(plotly)
library(shinythemes)
library(DT)
library(rsconnect)
library(shinydashboard)
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(forecast)
library(ggplot2)
library(dplyr)
library(lubridate)
library(readr)
library(scales)
library(gridExtra)
library(prophet)
runApp()
shiny::runApp()
